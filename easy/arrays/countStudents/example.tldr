{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 25,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 5,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 2,
			"com.tldraw.asset.image": 5,
			"com.tldraw.asset.video": 5,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 2,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 2,
			"com.tldraw.shape.geo": 9,
			"com.tldraw.shape.note": 8,
			"com.tldraw.shape.line": 5,
			"com.tldraw.shape.frame": 0,
			"com.tldraw.shape.arrow": 5,
			"com.tldraw.shape.highlight": 1,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 4,
			"com.tldraw.shape.video": 2,
			"com.tldraw.binding.arrow": 0
		}
	},
	"records": [
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"x": -384.2119459807701,
			"y": 82.93764404960766,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:ZNB3xy9oG6sdPGdwyZ4Ao",
			"type": "text",
			"props": {
				"color": "black",
				"size": "l",
				"w": 759.8875122070312,
				"text": "Number of Students Unable to Eat Lunch",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": 753.1703447614398,
			"y": 188.18977056230815,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:riCY4p6TwstpzyO6KrhT_",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 8,
				"text": "",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a2508",
			"typeName": "shape"
		},
		{
			"x": -1198.3502048173305,
			"y": 166.34050995962957,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:zWkhcVkrt9uOr-lBDXk8t",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 2392.784325572679,
				"text": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\n\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\nOtherwise, they will leave it and go to the queue's end.\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\n\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.\n\nhttps://leetcode.com/problems/number-of-students-unable-to-eat-lunch\n\n\n\n\n\n\nExample 1:\n\nInput: students = [1,1,0,0], sandwiches = [0,1,0,1]\nOutput: 0 \nExplanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n\n- Front student takes the top sandwich and leaves the line making \nstudents = [0,1,1] and sandwiches = [1,0,1].\n\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n\n- Front student takes the top sandwich and leaves the line making \nstudents = [1,0] and sandwiches = [0,1].\n\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n\n- Front student takes the top sandwich and leaves the line making \nstudents = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making \nstudents = [] and sandwiches = [].\n\nHence all students are able to eat.\n\n\nExample 2:\nstudents = [1,1,1,0,0,1]\nsandwiches = [1,0,0,0,1,1]\n\nFront student takes the top sandwich and leaves the line making \nstudents = [1,1,0,0,1] and sandwiches = [0,0,0,1,1].\n\nFront student leaves the top sandwich and returns to the end of the line making \nstudents = [1,0,0,1,1] and sandwiches = [0,0,0,1,1] (no change to sandwiches)\n\nFront student leaves the top sandwich and returns to the end of the line making \nstudents = [0,0,1,1,1] and sandwiches = [0,0,0,1,1] (no change to sandwiches)\n\nFront student takes the top sandwich and leaves the line making \nstudents = [0,1,1,1] and sandwiches = [0,0,1,1]\n\nFront student takes the top sandwich and leaves the line making \nstudents = [1,1,1] and sandwiches = [0,1,1]",
				"font": "draw",
				"textAlign": "start",
				"autoSize": false,
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a3ByM",
			"typeName": "shape"
		},
		{
			"x": 2079.2042961240577,
			"y": 731.1467476234438,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Mfhu831cwr0_6Hji1DDic",
			"type": "text",
			"props": {
				"color": "black",
				"size": "l",
				"w": 144.96875,
				"text": "Answer",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.001648026270388
			},
			"parentId": "page:page",
			"index": "a514O",
			"typeName": "shape"
		},
		{
			"x": 812.789263568021,
			"y": 2657.9482657784965,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:leVTxbIReNAuOGBpQaufi",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 8,
				"text": "",
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1.001648026270388
			},
			"parentId": "page:page",
			"index": "a66hJ",
			"typeName": "shape"
		},
		{
			"x": 1632.1996838923044,
			"y": 853.262499441561,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:NYtgRuDDnllZuhvDQHzwM",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1344.4259577444577,
				"text": "Created a loop which runs untill students length is more then zero\nThen:\nFirst of all I check if is there any student left which can potentially can have a sandwich. If not I exit the loop\n\n Also, I check if first sandwich value and studen not equal I will shift the first student to the end\n\nIf the first sandwich value equal to student value I will cut the first values of students and sendwiches \n\nWith that way we feed all the students or there won't be sandwich and just return the length\n\nAt  the end I just return students length\n\nvar countStudents = function (students, sandwiches) {\n    while (students.length > 0) {\n        if (!students.includes(sandwiches[0])) break;\n\n        if (students[0] !== sandwiches[0]) {\n            students.push(students.shift());\n        } else {\n            students.shift();\n            sandwiches.shift();\n        }\n    }\n    return students.length;\n};   \n\nconsole.log(countStudents([1, 1, 0, 0], [0, 1, 0, 1])); // 0\nconsole.log(countStudents([1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1])); // 3\n\nThis solution beats 100% runtime and  87% memory",
				"font": "draw",
				"textAlign": "start",
				"autoSize": false,
				"scale": 1.001648026270388
			},
			"parentId": "page:page",
			"index": "a7CFN",
			"typeName": "shape"
		},
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": 2243.9365772091683,
			"y": 955.7898474180813,
			"lastActivityTimestamp": 1731104502902,
			"meta": {}
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "default",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 1217.5999755859375,
				"h": 702.4000244140625
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"isFocused": true,
			"devicePixelRatio": 1.25,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"editingShapeId": "shape:NYtgRuDDnllZuhvDQHzwM",
			"croppingShapeId": null,
			"selectedShapeIds": [
				"shape:NYtgRuDDnllZuhvDQHzwM"
			],
			"hoveredShapeId": "shape:NYtgRuDDnllZuhvDQHzwM",
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"x": -1183.936384825619,
			"y": -655.4628967941577,
			"z": 0.5194339025382603,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		}
	]
}